// Generated by CoffeeScript 1.10.0
var __checkParams, __handle, __hasObjectValue, __methods, __options, bodyParser, compression, express;

express = require("express");

compression = require("compression");

bodyParser = require("body-parser");

__options = {
  port: 8080,
  dataKey: "data",
  errorKey: "error",
  meta: true
};

__methods = ["get", "post", "put", "delete", "head"];

__hasObjectValue = function(o, path) {
  var i, k, len, p, t, v;
  t = {};
  for (k in o) {
    v = o[k];
    t[k] = v;
  }
  for (i = 0, len = path.length; i < len; i++) {
    p = path[i];
    if (!t[p]) {
      return false;
    }
    t = t[p];
  }
  return true;
};

__checkParams = function(params, req, res, next) {
  var i, len, p, path;
  path = req.method + " " + req.path;
  if (params.length === 0) {
    return next();
  }
  for (i = 0, len = params.length; i < len; i++) {
    p = params[i];
    if (!req.body[p]) {
      if (p.indexOf(".") < 0) {
        return next("Parameter '" + p + "' is missing");
      }
      if (!__hasObjectValue(req.body, p.split("."))) {
        return next("Parameter '" + p + "' is missing");
      }
    }
  }
  return next();
};

__handle = function(app, method, route, requiredParams, callback) {
  if (typeof requiredParams === "function") {
    callback = requiredParams;
    requiredParams = [];
  }
  return app[method](route, function(req, res, next) {
    return __checkParams(requiredParams, req, res, function(err) {
      if (err) {
        return next(err);
      }
      return callback(req, res, function(err, data) {
        if (err) {
          return next(err);
        }
        return res.sendData(data);
      });
    });
  });
};

module.exports = function(options) {
  var app, cb, i, k, len, method, o, squirrel, v;
  if (options == null) {
    options = {};
  }
  o = {};
  for (k in __options) {
    v = __options[k];
    o[k] = options[k] || v;
  }
  app = express();
  app.use(compression());
  app.use(bodyParser.json());
  app.use(function(req, res, next) {
    var d;
    d = new Date;
    res.sendData = function(data, key) {
      var r;
      if (key == null) {
        key = o.dataKey;
      }
      r = {};
      r[key] = data;
      if (o.meta) {
        r._meta = {
          took: Date.now() - d.getTime(),
          endpoint: req.method + " " + req.path,
          body: req.body
        };
      }
      return res.json(r);
    };
    return next();
  });
  squirrel = {};
  cb = function(method) {
    return function(route, requiredParams, callback) {
      return __handle(app, method, route, requiredParams, callback);
    };
  };
  for (i = 0, len = __methods.length; i < len; i++) {
    method = __methods[i];
    squirrel[method] = cb(method);
  }
  squirrel.listen = function() {
    app.use(function(err, req, res, next) {
      if (err instanceof Error) {
        console.error(err.message);
        console.error(err.stack);
      } else {
        console.error(err);
      }
      return res.sendData({
        message: err.toString()
      }, o.errorKey);
    });
    app.listen(o.port);
    return console.log("Listening on " + o.port);
  };
  return squirrel;
};
